# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iuSRSUCDuwM2UUd2lFhOPlGKmDUUrTEG
"""

!pip install textblob
from textblob import TextBlob

!pip install yfinance
!pip install ta
!pip install vaderSentiment
!pip install statsmodels
!pip install newsapi-python

!pip install feedparser
import feedparser

!pip install feedparser

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import ta
import requests
from statsmodels.tsa.arima.model import ARIMA
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from newsapi import NewsApiClient







def get_crypto_news(api_key, query='gala OR bitcoin', from_date='2024-12-01', to_date='2024-12-31'):
    url = "https://newsapi.org/v2/everything"
    params = {
        'q': query,
        'from': from_date,
        'to': to_date,
        'language': 'en',
        'sortBy': 'relevancy',
        'pageSize': 20,
        'apiKey': api_key
    }

    response = requests.get(url, params=params)

    if response.status_code != 200:
        print("⚠️ فشل في الاتصال بـ NewsAPI:", response.status_code, response.text)
        return pd.DataFrame()

    articles = response.json().get('articles', [])
    news_data = []
    for article in articles:
        news_data.append({
            'date': article['publishedAt'][:10],
            'title': article['title'],
            'description': article['description']
        })

    return pd.DataFrame(news_data)

df = yf.download("GALA-USD", period="1y", interval="1d")
df = df[['Close']].rename(columns={'Close': 'close'})
df.dropna(inplace=True)
df.plot(title="GALA/USD - سعر يومي من Yahoo Finance", figsize=(10,4))

df['rsi'] = df['rsi'] = ta.momentum.RSIIndicator(close=df['close'].squeeze()).rsi()
df[['close', 'rsi']].tail()

model = ARIMA(df['close'], order=(3, 1, 2))
model_fit = model.fit()
forecast = model_fit.forecast(steps=7)
print("🔮 توقع السعر للأيام القادمة:")
print(forecast)

from datetime import datetime

def fetch_google_news_rss(query="gala crypto"):
    feed_url = f"https://news.google.com/rss/search?q={query.replace(' ', '+')}&hl=en-US&gl=US&ceid=US:en"
    feed = feedparser.parse(feed_url)

    data = []
    for entry in feed.entries:
        try:
            # محاولة قراءة التاريخ الكامل بشكل آمن
            date_obj = datetime.strptime(entry.published, "%a, %d %b %Y %H:%M:%S %Z")
            clean_date = date_obj.strftime("%Y-%m-%d")
        except:
            continue  # تجاهل الخبر الذي يحتوي على تاريخ غير صحيح

        data.append({
            'date': clean_date,
            'title': entry.title,
            'description': entry.summary
        })

    return pd.DataFrame(data)

from textblob import TextBlob

def analyze_sentiment(text):
    if not text:
        return 0
    analysis = TextBlob(text)
    return analysis.sentiment.polarity  # قيمة بين -1 (سلبي) و +1 (إيجابي)

news_df = fetch_google_news_rss()
news_df['sentiment_score'] = news_df['description'].apply(analyze_sentiment)
news_df['date'] = pd.to_datetime(news_df['date'])  # الآن ستكون كلها صالحة بإذن الله

daily_sentiment = news_df.groupby('date')['sentiment_score'].mean()

# تحويل daily_sentiment من Series إلى DataFrame صالح للدمج
daily_sentiment_clean = daily_sentiment.reset_index(name='sentiment_score')

# إزالة جميع مستويات الفهرسة وإعادة بناء df نهائيًا
df_clean = pd.DataFrame(df.values, columns=df.columns)
df_clean['Date'] = df.index.get_level_values(-1)

# إعادة تفكيك df إلى DataFrame صريح 100%
df_clean = pd.DataFrame(df.to_numpy(), columns=df.columns)  # بيانات بدون أي مؤشر
df_clean_dates = df.index.to_frame(index=False)  # نحصل على كل مستويات المؤشر كمعلومات

# تحديد العمود الزمني بدقة
if 'Date' in df_clean_dates.columns:
    df_clean['Date'] = pd.to_datetime(df_clean_dates['Date'])
else:
    df_clean['Date'] = pd.to_datetime(df_clean_dates.iloc[:, -1])  # آخر عمود غالبًا هو التاريخ

# نفك كامل المؤشر إلى DataFrame مسطح 100%
df_index_flat = df.index.to_frame(index=False)  # المؤشر كمعلومات
df_values = pd.DataFrame(df.values, columns=df.columns)  # القيم
df_clean = pd.concat([df_values, df_index_flat], axis=1)

# نحدد التاريخ ونتأكد من تنسيقه
if 'Date' not in df_clean.columns:
    df_clean.rename(columns={df_clean.columns[-1]: 'Date'}, inplace=True)
df_clean['Date'] = pd.to_datetime(df_clean['Date'])

daily_sentiment_clean = daily_sentiment.reset_index()
daily_sentiment_clean.columns = ['Date', 'sentiment_score']
daily_sentiment_clean['Date'] = pd.to_datetime(daily_sentiment_clean['Date'])

merged = pd.merge(df_clean, daily_sentiment_clean, on='Date', how='left')
merged['sentiment_score'].fillna(0, inplace=True)

print(merged.columns.tolist())

print(merged.columns.tolist())

print(merged.columns.tolist())

# توحيد أسماء الأعمدة متعددة المستويات
merged.columns = ['_'.join(col) if isinstance(col, tuple) else col for col in merged.columns]

import matplotlib.pyplot as plt

plt.figure(figsize=(14, 6))
plt.plot(merged['Date'], merged['close_GALA-USD'], label='GALA Price', color='blue', linewidth=2)
plt.plot(merged['Date'], merged['sentiment_score'], label='Sentiment Score', color='orange', linewidth=2)
plt.title('GALA Price vs. News Sentiment Over Time')
plt.xlabel('Date')
plt.ylabel('Value')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

correlation = merged['sentiment_score'].corr(merged['close_GALA-USD'])
print(f"Correlation: {correlation:.3f}")

# 📥 Step 1: تحميل البيانات
# 🧠 Step 2: تحليل المشاعر
# 🔗 Step 3: الدمج
# 📊 Step 4: الرسم البياني والتحليل

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import yfinance as yf
# from textblob import TextBlob
# import feedparser
# from sklearn.linear_model import LinearRegression
# import matplotlib.pyplot as plt
# 
# st.set_page_config(page_title="تحليل العملات والمشاعر", layout="wide")
# st.title("📊 تحليل سعر العملة مقابل مشاعر الأخبار")
# 
# # إدخال المستخدم للعملة
# ticker = st.text_input("🔎 أدخل رمز العملة (مثلاً GALA-USD)", "GALA-USD")
# 
# # تواريخ التحميل
# start = st.date_input("📅 البداية", pd.to_datetime("2024-01-01"))
# end = st.date_input("📅 النهاية", pd.to_datetime("2025-07-01"))
# 
# if st.button("🚀 شغّل التحليل"):
#     # تحميل السعر
#     price_data = yf.download(ticker, start=start, end=end)
#     price_data = price_data[['Close']].rename(columns={'Close': 'price'})
#     price_data['Date'] = price_data.index
#     price_data.reset_index(drop=True, inplace=True)
# 
#     # الأخبار والمشاعر
#     def fetch_google_news_rss(query="crypto"):
#         url = f"https://news.google.com/rss/search?q={query.replace(' ', '+')}&hl=en-US&gl=US&ceid=US:en"
#         feed = feedparser.parse(url)
#         data = [{'title': entry.title, 'description': entry.description, 'date': entry.published} for entry in feed.entries]
#         df = pd.DataFrame(data)
#         df['date'] = pd.to_datetime(df['date']).dt.date
#         return df
# 
#     def analyze_sentiment(text):
#         if not text:
#             return 0
#         return TextBlob(text).sentiment.polarity
# 
#     news_df = fetch_google_news_rss(query=ticker.split("-")[0] + " crypto")
#     news_df['sentiment_score'] = news_df['description'].apply(analyze_sentiment)
#     news_df['Date'] = pd.to_datetime(news_df['date'])
#     daily_sentiment = news_df.groupby('Date')['sentiment_score'].mean().reset_index()
# 
#     # الدمج والتوقع
#     merged = pd.merge(price_data, daily_sentiment, on='Date', how='left')
#     merged['sentiment_score'].fillna(0, inplace=True)
#     merged['lagged_sentiment'] = merged['sentiment_score'].shift(1)
#     merged.dropna(inplace=True)
# 
#     model = LinearRegression()
#     model.fit(merged[['lagged_sentiment']], merged['price'])
#     merged['predicted_price'] = model.predict(merged[['lagged_sentiment']])
# 
#     # الرسم البياني
#     st.subheader("📈 السعر الفعلي والتوقع بناء على مشاعر الأخبار")
#     fig, ax = plt.subplots(figsize=(12, 5))
#     ax.plot(merged['Date'], merged['price'], label='السعر الفعلي', color='blue')
#     ax.plot(merged['Date'], merged['predicted_price'], label='السعر المتوقع', color='green')
#     ax.set_xlabel("التاريخ")
#     ax.set_ylabel("السعر")
#     ax.legend()
#     st.pyplot(fig)
# 
#     # معامل الارتباط
#     correlation = merged['price'].corr(merged['sentiment_score'])
#     st.success(f"💡 معامل الارتباط بين السعر والمشاعر: {correlation:.3f}")
#
